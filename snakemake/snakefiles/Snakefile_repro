__author__ = "Hannah Manning"
__email__ = "manningh@ohsu.edu"
__license__ = "MIT"

# PURPOSE

"""
Workflow for parallelized reproduction of the mutual exclusivity analysis
performed by Babur, O'Roak, and Manning and to be submitted for publication
in 2019.
"""

# IMPORTS
from os.path import join

#######################################

# DEFINE VARIABLES FOR EASY SWAPPING:

CONFIGURATION_YAML="configs/repro.yaml"

########################################


# set the base directory mutex-de-novo/
BASEDIR = os.path.abspath("../../") + "/"

# fetch the user's run configuration
configfile: BASEDIR + CONFIGURATION_YAML

# set the log directory.
# note: this can be a snakemake gotcha! ensure log directory exists prior to launching pipeline
LOGBASE = "{bd}snakemake/snakelogs/repro/".format(bd=BASEDIR)

# set the input and output directories.
# note: unlike with log dirs, snakemake will make the outdir if you haven't already.
INBASE = "{bd}.panda/".format(bd=BASEDIR)
OUTBASE = "{bd}data/output/repro/".format(bd=BASEDIR)

# pull some values from config file
# at the end of the day, we will have new outdirs under data/output/
# each of those will contain, at least, a file called "results.txt"
# some will contain more results files than others
# files with the same set of resulting file titles (e.g. "results.txt" & "results-with-names.txt") are grouped:
T1_OUTDIRS = config["type-1-outdir"]
T2_OUTDIRS = config["type-2-outdir"]
T3_OUTDIRS = config["type-3-outdir"]
T4_OUTDIRS = config["type-4-outdir"]

# get number of memory pointer shuffle steps:
SHUFFLES=str(config["nshuffles"])

# get a space-separated "list" of FDRs to use in exploring results
# it's a string instead of a list because Bash will be interpreting it
FDR_STR=config["FDRs"]

# number of significant results to report
TOP_X=config["topX"]

# all commands start with...
COMMAND_BASE="java -jar {bd}target/mutex-de-novo.jar".format(bd=BASEDIR)

# set commands:
CALC_CMD=COMMAND_BASE + " calculate" 
EXPL_CMD=COMMAND_BASE + " explore-significance-in-results"
FILT_CMD=COMMAND_BASE + " filter-results-to-most-hit"
ANNO_CMD=COMMAND_BASE + " annotate-set-members"

# BEGIN RULES
# general notes:
#   - anything that is in "{{}}" will get missed by the first .format() sweep and will be left for snakemake to evaluate
#   - these things are usually (always?) expansions & wildcards

# "input" here defines which files we expect to see at the end of the whole workflow
rule targets:
	input:
		expand(OUTBASE + "{outdir}/results.txt", outdir=T1_OUTDIRS + T2_OUTDIRS + T3_OUTDIRS + T4_OUTDIRS)
		expand(OUTBASE + "{outdir}/results-with-names.txt", outdir=T2_OUTDIRS + T3_OUTDIRS + T4_OUTDIRS)
		expand(OUTBASE + "{outdir}/results-top50.txt", outdir=T3_OUTDIRS + T4_OUTDIRS)
		expand(OUTBASE + "{outdir}/results-significance-explored.txt", outdir=T3_OUTDIRS + T4_OUTDIRS)
		expand(OUTBASE + "{outdir}/results-circadian-members-table.txt", outdir=T4_OUTDIRS)
		expand(OUTBASE + "{outdir}/results-PI3K-members-table.txt)

# rules 1-10 can run in parallel.
rule SFARI_original_1:
	input:
		# TODO: Check this input
		INBASE + "SFARI.txt",
		INBASE + "denovo-db.non-ssc-samples.variants.tsv",
		INBASE + "denovo-db.ssc-samples.variants.tsv",
		INBASE + "Yuen2017-T3.csv"
	output:
		OUTBASE + "SFARI-original/results.txt"
	shell:
		"""
		{cmd_prfx} yuen-turner-autism SFARI SFARI-original {shuf}
		""".format(
			   cmd_prfx=CALC_CMD,
			   shuf=SHUFFLES
			  )
			   

rule Reactome_original_2:
	input:
		# TODO: Check this input
		INBASE + Reactome-pathways.txt
		INBASE + "denovo-db.non-ssc-samples.variants.tsv",
		INBASE + "denovo-db.ssc-samples.variants.tsv",
		INBASE + "Yuen2017-T3.csv"
	output:
		OUTBASE + "Reactome-original/results.txt"
	shell:
		"""
		{cmd_prfx} yuen-turner-autism Reactome Reactome-original {shuf}
		""".format(
			   cmd_prfx=CALC_CMD,
			   shuf=SHUFFLES
			  )

rule SFARI_intron_3:
	input:
		# TODO: Check this input
		INBASE + "SFARI.txt",
		INBASE + "denovo-db.non-ssc-samples.variants.tsv",
		INBASE + "denovo-db.ssc-samples.variants.tsv",
		INBASE + "Yuen2017-T3.csv"	
	output:
		OUTBASE + "SFARI-intron/results.txt"
	shell:
		"""
		{cmd_prfx} yuen-turner-autism-intron SFARI SFARI-intron {shuf}
		""".format(
			   cmd_prfx=CALC_CMD,
			   shuf=SHUFFLES
			  )
rule Reactome_intron_4:
	input:
		# TODO: Check this input
		INBASE + "Reactome-pathways.txt",
		INBASE + "denovo-db.non-ssc-samples.variants.tsv",
		INBASE + "denovo-db.ssc-samples.variants.tsv",
		INBASE + "Yuen2017-T3.csv"
	output:
		OUTBASE + "Reactome-intron/results.txt"
	shell:
		"""
		{cmd_prfx} yuen-turner-autism-intron Reactome Reactome-intron {shuf}
		""".format(
			   cmd_prfx=CALC_CMD,
			   shuf=SHUFFLES
			  )

rule SFARI_not_intron_5:
	input:
		# TODO: Check this input
		INBASE + "SFARI.txt",
		INBASE + "denovo-db.non-ssc-samples.variants.tsv",
		INBASE + "denovo-db.ssc-samples.variants.tsv",
		INBASE + "Yuen2017-T3.csv"
	output:
		OUTBASE + "SFARI-not-intron/results.txt"
	shell:
		"""
		{cmd_prfx} yuen-turner-autism-not-intron SFARI SFARI-not-intron {shuf}
		""".format(
			   cmd_prfx=CALC_CMD,
			   shuf=SHUFFLES
			  )

rule Reactome_not_intron_6:
	input:
		# TODO: Check this input
		INBASE + "Reactome-pathways.txt",
		INBASE + "denovo-db.non-ssc-samples.variants.tsv",
		INBASE + "denovo-db.ssc-samples.variants.tsv",
		INBASE + "Yuen2017-T3.csv"
	output:
		OUTBASE + "Reactome-not-intron/results.txt"
	shell:
		"""
		{cmd_prfx} yuen-turner-autism-not-intron Reactome Reactome-not-intron {shuf}
		""".format(
			   cmd_prfx=CALC_CMD,
			   shuf=SHUFFLES
			  )

rule SFARI_Yuen_7:
	input:
		# TODO: Check this input
		INBASE + "SFARI.txt",
		INBASE + "denovo-db.non-ssc-samples.variants.tsv",
		INBASE + "denovo-db.ssc-samples.variants.tsv",
		INBASE + "Yuen2017-T3.csv"
	output:
		OUTBASE + "SFARI-Yuen/results.txt"
	shell:
		"""
		{cmd_prfx} yuen-autism SFARI SFARI-Yuen {shuf}
		""".format(
			   cmd_prfx=CALC_CMD,
			   shuf=SHUFFLES
			  )

rule Reactome_Yuen_8:
	input:
		# TODO: Check this input
		INBASE + "Reactome-pathways.txt",
		INBASE + "denovo-db.non-ssc-samples.variants.tsv",
		INBASE + "denovo-db.ssc-samples.variants.tsv",
		INBASE + "Yuen2017-T3.csv"
	output:
		OUTBASE + "Reactome-Yuen/results.txt"
	shell:
		"""
		{cmd_prfx} yuen-autism Reactome Reactome-Yuen {shuf}
		""".format(
			   cmd_prfx=CALC_CMD,
			   shuf=SHUFFLES
			  )

rule SFARI_Yuen_autism_Turner_control_9:
	input:
		# TODO: Check this input
		INBASE + "SFARI.txt",
		INBASE + "denovo-db.non-ssc-samples.variants.tsv",
		INBASE + "denovo-db.ssc-samples.variants.tsv",
		INBASE + "Yuen2017-T3.csv"
	output:
		OUTBASE + "SFARI-Yuen-autism-Turner-control/results.txt"
	shell:
		"""
		{cmd_prfx} yuen-autism-turner-control SFARI SFARI-Yuen-autism-Turner-control {shuf}
		""".format(
			   cmd_prfx=CALC_CMD,
			   shuf=SHUFFLES
			  )

rule Reactome_Yuen_autism_Turner_control_10:
	input:
		# TODO: Check this input
		INBASE + "Reactome-pathways.txt",
		INBASE + "denovo-db.non-ssc-samples.variants.tsv",
		INBASE + "denovo-db.ssc-samples.variants.tsv",
		INBASE + "Yuen2017-T3.csv"
	output:
		OUTBASE + "Reactome-Yuen-autism-Turner-control/results.txt"
	shell:
		"""
		{cmd_prfx} yuen-autism-turner-control Reactome Reactome-Yuen-autism-Turner control {shuf}
		""".format(
			   cmd_prfx=CALC_CMD,
			   shuf=SHUFFLES
			  )

# the remaining rules depend on the completion of the previous ones
rule FDR_exploration_of_2s_output_11:
	input:
		OUTBASE + "Reactome-original/results.txt"
	output:
		OUTBASE + "Reactome-original/results-significance-explored.txt"
	shell:
		"""
		{cmd_prfx} {{input}} {{output}} mutex {fdrs}
		""".format(
			   cmd_prfx=EXPL_CMD,
			   fdrs=FDR_STR
			  )

rule FDR_exploration_of_8s_output_12:
	input:
		OUTBASE + "Reactome-Yuen/results.txt"
	output:
		OUTBASE + "Reactome-Yuen/results-significance-explored.txt"
	shell:
		"""
		{cmd_prfx} {{input}} {{output}} mutex {fdrs}
		""".format(
			   cmd_prfx=EXPL_CMD,
			   fdrs=FDR_STR
			  )

rule FDR_exploration_of_10s_output_13:
	input:
		OUTBASE + "Reactome-Yuen-autism-Turner-control/results.txt"
	output:
		OUTBASE + "Reactome-Yuen-autism-Turner-control/results-significance-explored.txt"
	shell:
		"""
		{cmd_prfx} {{input}} {{output}} mutex {fdrs}
		""".format(
			   cmd_prfx=EXPL_CMD,
			   fdrs=FDR_STR
			  )

rule top50_of_2s_output_and_names_14:
	input:
		# TODO: Check this input
		OUTBASE + "Reactome-original/results.txt"
	output:
		named_res = OUTBASE + "Reactome-original/results-with-names.txt",
		topx_res = OUTBASE + "Reactome-original/results-top{x}.txt".format(x=topX)
	shell:
		"""
		{cmd_prfx} {{output.named_res}} {{output.topx_res}} {topx}
		""".format(
			  cmd_prfx=FILT_CMD,
			  topx=TOP_X
			 )

rule top50_of_8s_output_and_names_15:
	input:
		# TODO: Check this input
		OUTBASE + "Reactome-Yuen/results.txt"
	output:
		named_res = OUTBASE + "Reactome-Yuen/results-with-names.txt"
		topx_res = OUTBASE + "Reactome-Yuen/results-top{x}.txt".format(x=topX)
	shell:
		"""
		{cmd_prfx} {{output.named_res}} {{output.topx_res}} {topx}
		""".format(
			   cmd_prfx=FILT_CMD,
			   topx=TOP_X
			  )

rule top50_of_10s_output_and_names_16:
	input:
		# TODO: Check this input
		OUTBASE + "Reactome-Yuen-autism-Turner-control/results.txt"
	output:
		named_res = OUTBASE + "Reactome-Yuen-autism-Turner-control/results-with-names.txt"
		topx_res = OUTBASE + "Reactome-Yuen-autism-Turner-control/results-top{x}.txt".format(x=topX)
	shell:
		"""
		{cmd_prfx} {{output.named_res}} {{output.topx_res}} {topX}
		""".format(
			   cmd_prfx=FILT_CMD,
			   topx=TOP_X
			  )

rule reactome_orig_circadian_members_17:
	input:
		# TODO: WHY?
		OUTBASE + "Reactome-original/R-HSA-400253-mutex.txt"
	output:
		OUTBASE + "Reactome-original/results-circadian-members-table.txt"
	shell:
		"""
		{cmd_prfx} {{input}} yuen-turner-autism {{output}}
		""".format(
			   cmd_prfx=ANNO_CMD
			  )

rule reactome_orig_pi3k_members_18:
	input:
		# TODO: WHY?
		OUTBASE + "Reactome-original/R-HSA-1257604-mutex.txt"
	output:
		OUTBASE + "Reactome-original/results-PI3K-members-table.txt"
	shell:
		"""
		{cmd_prfx} {{input}} yuen-turner-autism {{output}}
		""".format(
			   cmd_prfx=ANNO_CMD
			  )


